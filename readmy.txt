in visual studio apri la cartella in cui creare la cartella dell'app e da terminale lancia:
dotnet new webapp -o nomeCartellaDelProgramma



CREARE CERTIFICATO *************************
create a Root Secure Sockets Layer (SSL) certificate. This root certificate can then be used to sign any number of certificates you might generate for individual domains
Generate a RSA-2048 key and save it to a file rootCA.key. This file will be used as the key to generate the Root SSL certificate. 

openssl genrsa -des3 -passout pass:passpharedausare -out rootCA.key 2048

You can use the key you generated to create a new Root SSL certificate. Save it to a file namedrootCA.pem. This certificate will have a validity of 1,024 days. Feel free to change it to any number of days you want. You’ll also be prompted for other optional information.

openssl req -x509 -new -nodes -key rootCA.key -sha256 -passin pass:passpharedausare  -days 1024 -out rootCA.pem

Before you can use the newly created Root SSL certificate to start issuing domain certificates, there’s one more step. You need to to tell your Mac to trust your root certificate so all individual certificates issued by it are also trusted.

Open Keychain Access on your Mac and go to the Certificates category in your System keychain. Once there, import the rootCA.pem using File > Import Items. Double click the imported certificate and change the “When using this certificate:” dropdown to Always Trust in the Trust section.

The root SSL certificate can now be used to issue a certificate specifically for your local development environment located at localhost.

Create a new OpenSSL configuration file server.csr.cnf so you can import these settings when creating a certificate instead of entering them on the command line.

[req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn

[dn]
C=US
ST=RandomState
L=RandomCity
O=RandomOrganization
OU=RandomOrganizationUnit
emailAddress=hello@example.com
CN = localhost
Create a v3.ext file in order to create a X509 v3 certificate. Notice how we’re specifying subjectAltName here.

authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
Create a certificate key for localhost using the configuration settings stored in server.csr.cnf. This key is stored in server.key.

req -new -sha256 -nodes -out server.csr -newkey rsa:2048 -keyout server.key
 -config <( cat server.csr.cnf ) <-- SKIP THIS

A certificate signing request is issued via the root SSL certificate we created earlier to create a domain certificate for localhost. The output is a certificate file called server.crt.

openssl x509 -req -in server.csr -CA rootCA.pem -passin pass:passpharedausare  -CAkey rootCA.key -CAcreateserial -out server.crt -days 500 -sha256 -extfile v3.ext

You’re now ready to secure your localhost with HTTPS. Move the server.key and server.crt files to an accessible location on your server and include them when starting your server.

In an Express app written in Node.js, here’s how you would do it. Make sure you do this only for your local environment. Do not use this in production
*********************************

dotnet dev-certs https --trust

per avviare l'app
cd nomecartellaapp
dotnet watch run

IN VISUAL STUDIO
per avviare l'app con run:
creare il file task:
create the tasks.json file and build the source:

Use the shortcut Ctrl + Shift + P to open the command palette.
Select the Tasks: Configure Task option in the command palette.
Then, select Create tasks.json file from template from the command palette. It will display the list of build tools. Select the .NET Core option from the list.
create the launch.json file.
una volta creato fai add configuration e scegli NET core launch web
modifica il path per arrivare al file .dll
su run puoi ora impostare core web e fare run